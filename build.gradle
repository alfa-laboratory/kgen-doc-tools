buildscript {
    ext {
        kotlinVersion = '1.3.10'
        junitVersion = '5.2.0'
        coroutinesVersion = '1.0.0'
    }
    repositories {
        mavenLocal()
        jcenter()
        maven { url "https://dl.bintray.com/kotlin/kotlin-dev" }
        maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
    }
    dependencies {
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion")
    }
}

group = 'ru.alfalab.dcreator'
version = "0.3.0"

subprojects {
    repositories {
        mavenLocal()
        jcenter()
        maven { url "https://dl.bintray.com/kotlin/kotlin-dev" }
        maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
        
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    }
}

configure(projectsWithFlags('kotlin_common')) {
    apply plugin: 'kotlin-platform-common'

    dependencies {
        compile("org.jetbrains.kotlin:kotlin-stdlib-common:$kotlinVersion")
        compile("org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutinesVersion")

        testCompile("org.jetbrains.kotlin:kotlin-test-common:$kotlinVersion")
        testCompile("org.jetbrains.kotlin:kotlin-test-annotations-common:$kotlinVersion")
    }

    kotlin.experimental.coroutines "enable"
}

configure(projectsWithFlags('kotlin_js')) {
    apply plugin: 'kotlin-platform-js'
    apply plugin: 'kotlin-dce-js'

    dependencies {
        compile("org.jetbrains.kotlin:kotlin-stdlib-js:$kotlinVersion")
        compile("org.jetbrains.kotlinx:kotlinx-coroutines-core-js:$coroutinesVersion")

        testCompile("org.jetbrains.kotlin:kotlin-test-js:$kotlinVersion")
//        compile("org.jetbrains.kotlinx:kotlinx-html-js:0.6.6")
    }

    compileKotlin2Js.kotlinOptions {
        moduleKind = "commonjs"
        sourceMap = true
        moduleKind = "commonjs"
//        outputFile = "node/index.js"
        freeCompilerArgs = ['-progressive']
    }

    compileTestKotlin2Js.kotlinOptions {
        metaInfo = true
        sourceMap = true
        moduleKind = "commonjs"
        freeCompilerArgs = ['-progressive']
    }

    kotlin.experimental.coroutines "enable"
}

configure(projectsWithFlags('kotlin_jvm')) {
    apply plugin: 'kotlin-platform-jvm'

    test {
        useJUnitPlatform()
    }

    dependencies {
        compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion")
        compile("org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion")

        testCompile("org.jetbrains.kotlin:kotlin-test:$kotlinVersion")
        testCompile("org.jetbrains.kotlin:kotlin-test-junit5:$kotlinVersion")
        testCompile("com.nhaarman:mockito-kotlin-kt1.1:1.5.0")
        testCompile("org.junit.jupiter:junit-jupiter-api:$junitVersion")
        testRuntime("org.junit.jupiter:junit-jupiter-engine:$junitVersion")
    }

    compileKotlin.kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs = ['-Xprogressive']
    }

    compileTestKotlin.kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs = ['-Xprogressive']
    }

    kotlin.experimental.coroutines "enable"
}

configure(projectsWithFlags('jococo_test')) {
    apply plugin: 'jacoco'

    jacoco {
        toolVersion = "0.8.2"
    }

    task jacocoJupTestReport(type: JacocoReport) {
        executionData(test)
        sourceSets(sourceSets.main)
        sourceDirectories = files(sourceSets.main.allSource.srcDirs)
        classDirectories = files(sourceSets.main.output)

        reports {
            xml.enabled true
            xml.destination file("${buildDir}/reports/jacoco/report.xml")
            html.enabled false
            csv.enabled false
        }
    }

//    check.dependsOn jacocoJupTestReport
    jacocoJupTestReport.dependsOn test
}

