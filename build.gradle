buildscript {
    ext {
        kotlinVersion = '1.2.40'
        junitVersion = '5.0.3'
    }
    repositories {
        mavenLocal()
        jcenter()
        maven { url "https://dl.bintray.com/kotlin/kotlin-dev" }
    }
    dependencies {
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion")
        classpath("org.junit.platform:junit-platform-gradle-plugin:1.0.1")
    }
}

group = 'ru.alfalab.dcreator'
version = "0.2.0"

subprojects {
    repositories {
        mavenLocal()
        jcenter()
        maven { url "https://dl.bintray.com/kotlin/kotlin-dev" }
    }
}

configure(projectsWithFlags('kotlin_common')) {
    apply plugin: 'kotlin-platform-common'

    dependencies {
        compile("org.jetbrains.kotlin:kotlin-stdlib-common:$kotlinVersion")
    }
}

configure(projectsWithFlags('kotlin_js')) {
    apply plugin: 'kotlin-platform-js'

    dependencies {
        compile("org.jetbrains.kotlin:kotlin-stdlib-js:$kotlinVersion")
        compile("org.jetbrains.kotlinx:kotlinx-html-js:0.6.6")

        testCompile("org.jetbrains.kotlin:kotlin-test-annotations-common:$kotlinVersion")
    }
}

configure(projectsWithFlags('kotlin_jvm')) {
    apply plugin: 'kotlin-platform-jvm'
    apply plugin: "org.junit.platform.gradle.plugin"

    dependencies {
        compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion")

        testCompile("com.nhaarman:mockito-kotlin-kt1.1:1.5.0")
        testCompile("org.junit.jupiter:junit-jupiter-api:$junitVersion")
        testRuntime("org.junit.jupiter:junit-jupiter-engine:$junitVersion")
    }

    compileKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }

    compileTestKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }
}

configure(projectsWithFlags('jococo_test')) {
    apply plugin: 'jacoco'

    def junitPlatformTestTask = (JavaExec) project.tasks.getByName('junitPlatformTest')

    jacoco {
        applyTo(junitPlatformTestTask)
    }

    task jacocoJupTestReport(type: JacocoReport) {
        executionData(junitPlatformTestTask)
        sourceSets(sourceSets.main)
        sourceDirectories = files(sourceSets.main.allSource.srcDirs)
        classDirectories = files(sourceSets.main.output)

        reports {
            xml.enabled true
            xml.destination file("${buildDir}/reports/jacoco/report.xml")
            html.enabled false
            csv.enabled false
        }
    }

    check.dependsOn jacocoJupTestReport
    jacocoJupTestReport.dependsOn test
}

